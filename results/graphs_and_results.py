import matplotlib
import matplotlib.pyplot as plt
import numpy as np

def test_4(r):
    """
    this function was used to inspect logistic maps' distribution.
    """
    def logistic(x):
        return r*x*(1-x)
    init = np.linspace(0,1,1000)
    data=np.zeros((1000,1000))
    data[0] = init
    for i in range(999):
        data[i+1] = logistic(data[i])

    plt.hist(data.reshape((1000000,1)), bins=1000)
    plt.yscale("log")
    plt.show()

def test_5():
    """
    this funciton was used to generate two images used in the report.
    """
    def logistic(x):
        return 4*x*(1-x)

    length=200
    data=np.zeros((length))
    data[0] = 0.1
    random=np.zeros((length))
    for i in range(length-1):
        data[i+1] = logistic(data[i])
        random[i] = np.random.rand()

    plt.figure(figsize=(5,2))
    plt.scatter(np.linspace(1,length, num=length),data,marker='.')
    plt.xlabel("Iteration number")
    plt.savefig("chaos-iteration.png", bbox_inches="tight", pad_inches=0.1)
    #plt.show()
    
def plot_dist():
    """
    this function was used to test the random function and generate image of the histogram.
    """
    def logistic(r, x):
        return r*x*(1-x)
    r_=[4, 3.8, 3.6, 3.3]

    samples=1000
    init = np.linspace(0,1,samples+2)[1:-1]
    data = [None]*4
    for i in range(len(data)):
        data[i] = np.zeros((samples,samples))
        data[i][0] = init

    for i in range(len(data)):
        for j in range(samples-1):
            data[i][j+1] = logistic(r_[i],data[i][j])
    

    fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(6,5))
    for idx, ax in enumerate(axs.flat):
        ax.set(title=f"r={r_[idx]}", xlabel="bins", yscale="log")

    axs[0,0].hist(data[0].reshape((samples**2,1)), bins=np.linspace(0,1,int(samples/10)))
    axs[0,1].hist(data[1].reshape((samples**2,1)), bins=np.linspace(0,1,int(samples/10)))
    axs[1,0].hist(data[2].reshape((samples**2,1)), bins=np.linspace(0,1,int(samples/10)))
    axs[1,1].hist(data[3].reshape((samples**2,1)), bins=np.linspace(0,1,int(samples/10)))

    plt.tight_layout()
    plt.show()

def results():
    """
    the order of the data:
    noise | configuration (each case, 100 items in the list.)
    0   equal-cross
    0   skewed-cross
    0   random
    0.5 equal-cross
    0.5 skewed-cross
    0.5 random
    1   equal-cross
    1   skewed-cross
    1   random

    """
    res = [
        [3354, 3212, 2670, 2636, 3500, 3421, 3582, 4017, 2938, 2590, 3270, 2715, 2593, 3157, 3178, 3712, 4114, 2745, 3535, 3191, 3755, 3054, 2853, 3335, 3041, 2517, 3060, 3065, 3899, 2972, 4127, 3217, 2559, 3546, 3405, 3664, 3748, 2864, 2622, 3488, 2783, 2469, 2547, 2805, 2715, 4020, 3334, 3195, 3258, 3238, 2823, 3044, 3472, 3016, 2945, 2740, 3303, 3101, 2905, 3699, 3607, 3216, 3143, 2838, 3763, 2937, 3108, 3684, 3035, 2695, 2823, 3498, 3040, 2711, 2952, 4068, 2657, 3043, 2660, 3081, 3197, 2612, 3143, 3173, 2274, 2797, 3690, 2778, 3015, 3191, 3132, 3029, 2696, 2737, 4090, 2785, 3069, 3146, 2816, 3023],
        [3747, 3462, 2846, 2598, 3136, 3286, 3508, 4154, 2845, 3459, 2983, 3698, 2919, 2802, 3241, 3041, 3685, 2832, 3037, 3158, 4056, 3261, 3010, 3601, 3724, 2912, 2963, 3083, 3898, 3073, 2950, 3275, 3025, 3475, 3049, 4055, 3749, 3346, 3076, 3070, 2794, 3425, 3083, 2970, 3127, 3377, 3725, 3344, 2945, 3380, 3271, 3802, 3084, 2972, 3743, 2658, 3254, 2996, 3245, 3934, 2914, 3527, 3335, 3139, 3560, 3519, 3267, 3401, 3765, 3268, 3114, 3445, 3254, 3054, 3136, 2958, 3300, 3558, 3086, 3183, 2956, 3046, 3113, 3055, 2924, 3017, 3524, 2966, 3066, 3235, 3550, 3240, 3485, 2893, 3438, 3383, 3720, 2785, 3195, 3495],
        [1471, 1593, 3340, 1324, 2118, 2193, 3174, 2811, 1930, 1730, 1847, 1740, 1756, 2214, 3059, 3794, 2946, 2275, 2038, 2555, 3016, 1909, 1273, 2189, 1389, 1981, 3354, 1366, 2279, 1831, 2122, 2859, 3732, 2172, 1489, 2573, 2052, 3402, 2466, 2388, 1963, 1079, 2735, 646, 3579, 2249, 3214, 2718, 1734, 1690, 3451, 3163, 1603, 1879, 2117, 2710, 2603, 2580, 2185, 1151, 2601, 3906, 2925, 1316, 2180, 2178, 3044, 2273, 1554, 3320, 4380, 2942, 2949, 1892, 2789, 1829, 3441, 2410, 1563, 1846, 1772, 2309, 1650, 2009, 2872, 2596, 2727, 3562, 3284, 2347, 2972, 2606, 3510, 807, 1862, 1342, 2340, 2172, 3080, 1600],
    ]

    raw = [2763, 2934, 2667, 2880, 3125, 2551, 3527, 2656, 2460, 2967, 3993, 2750, 2696, 3091, 3022, 2762, 2789, 2601, 3982, 2555, 3247, 3318, 2549, 2767, 3165, 3163, 2778, 2689, 4102, 3480, 3091, 2434, 2850, 2551, 3100, 3287, 4247, 3427, 2528, 3000, 2737, 2707, 3218, 2894, 2547, 2919, 2831, 3107, 2777, 2375, 2707, 2809, 3371, 2980, 3227, 2999, 3798, 2749, 2699, 2986, 3472, 3346, 2730, 2707, 2944, 3254, 2419, 3478, 2854, 3195, 3045, 3924, 3530, 2596, 3444, 2430, 3130, 3124, 3188, 2909, 3385, 3050, 2897, 3512, 2868, 2797, 2721, 3701, 3564, 3316, 2822, 2944, 2546, 2758, 3040, 2832, 3366, 2536, 2556, 3584, 2982, 2957, 3299, 2995, 3606, 2410, 3272, 2894, 4006, 3082, 3661, 3049, 3041, 2711, 2811, 3523, 2976, 3537, 3267, 2990, 3279, 2757, 3422, 3106, 3525, 3129, 3499, 3325, 3270, 3018, 3316, 3084, 3730, 2819, 3022, 2856, 3750, 3177, 3104, 3918, 3096, 3372, 2937, 2962, 2879, 3291, 2947, 3163, 2976, 2961, 3355, 2740, 3226, 3571, 3072, 2656, 3478, 2894, 3117, 2734, 3682, 3016, 3351, 3105, 3388, 3202, 3169, 3047, 3012, 4120, 3236, 3072, 3326, 3296, 3497, 3008, 3137, 3206, 3007, 2601, 3802, 3099, 2985, 3302, 3023, 3198, 3098, 2887, 3127, 3744, 2793, 3441, 3035, 2820, 3144, 3142, 3469, 2813, 3439, 3027, 1837, 1320, 3868, 723, 1838, 2883, 2360, 3134, 1550, 1212, 1862, 2691, 2489, 2704, 2969, 5202, 3029, 2826, 2196, 2992, 3383, 2088, 1869, 2823, 1749, 2649, 3313, 1322, 2666, 1932, 2347, 2611, 4053, 1704, 1414, 3539, 2049, 2478, 2445, 2289, 2418, 1075, 3125, 699, 2642, 3294, 2699, 3160, 1202, 2417, 2612, 3271, 2481, 2007, 2109, 2077, 5009, 
        2548, 2084, 1201, 3014, 3620, 2705, 1764, 1745, 2330, 2159, 2024, 2260, 2269, 4013, 2688, 3689, 1935, 2159, 1211, 3414, 2371, 1807, 2203, 1663, 2778, 2236, 1942, 3305, 2504, 3074, 2947, 2273, 2056, 2927, 3216, 2563, 1147, 
        2764, 2058, 1856, 3148, 3138, 1860, 3234, 3244, 3160, 2680, 3697, 2980, 3305, 3240, 3771, 3368, 3083, 3561, 3178, 3337, 2666, 3620, 2698, 2882, 2698, 3295, 2583, 2796, 2781, 2669, 3068, 3904, 3743, 3633, 2948, 2868, 4089, 
        2672, 3133, 2846, 3311, 3126, 2886, 3735, 3258, 3071, 3214, 3458, 3336, 2878, 3630, 3214, 2535, 3024, 3077, 3211, 3526, 3736, 4006, 2812, 3022, 3609, 2872, 2890, 3051, 3382, 2606, 3010, 3425, 3018, 3477, 3356, 2719, 2911, 
        4035, 3580, 2804, 2854, 2795, 2510, 3766, 3227, 2561, 2579, 3025, 2875, 3929, 2911, 3103, 3420, 3153, 2458, 3134, 3072, 3003, 2909, 2904, 3438, 3781, 2999, 3094, 3331, 3083, 3273, 3528, 3671, 3607, 3329, 2969, 2767, 3206, 
        3351, 2936, 3837, 3348, 3068, 3433, 3696, 3025, 2823, 2962, 3252, 3227, 3130, 3573, 2992, 2974, 2976, 2920, 3184, 3254, 3157, 2836, 3281, 3505, 3519, 3126, 3099, 3029, 3742, 3090, 3052, 3010, 3098, 3344, 2942, 3161, 3479, 
        4055, 3378, 3139, 3081, 3111, 3565, 3188, 2866, 3458, 3285, 3528, 3357, 3505, 3552, 3365, 3431, 4141, 2725, 2977, 3055, 3365, 3196, 3301, 2944, 3208, 3062, 3394, 3727, 3459, 3036, 3521, 2854, 3273, 4427, 3021, 2931, 3532, 
        2677, 3347, 3421, 2990, 3454, 2964, 3523, 3413, 3128, 3605, 3689, 3528, 3133, 3424, 3499, 3991, 3104, 3248, 3371, 2749, 3343, 918, 2342, 3813, 945, 2038, 2411, 2608, 3012, 1685, 1031, 1525, 2554, 2639, 2415, 2462, 4423, 1823, 2682, 1688, 3121, 2981, 2348, 1207, 2309, 1400, 2797, 2570, 1319, 1712, 1676, 2461, 1264, 2570, 2062, 1913, 4017, 1182, 3312, 2393, 2367, 1325, 714, 2742, 650, 3157, 2020, 3430, 2508, 2449, 1966, 2674, 2474, 1559, 2046, 2334, 2445, 2554, 2890, 1505, 1666, 3075, 3747, 1480, 2289, 1443, 2207, 2152, 2293, 970, 2649, 4019, 2392, 3683, 1761, 2570, 1352, 3075, 2581, 3265, 1579, 1254, 3965, 1893, 2330, 3350, 2563, 2932, 2907, 2551, 2853, 2609, 3371, 2445, 858, 2037, 1164, 1954, 3360, 3660, 1752]

    for i in range(6):
        newslice = raw[i*100:(i+1)*100]
        assert len(newslice) == 100
        res.append(newslice)

    for l in res:
        assert len(l) == 100
        mean = np.mean(l)
        std = np.std(l)
        median = np.median(l)

        print(f"mean: {mean}, std: {std}, median: {median}")

if __name__ == "__main__":
    results()